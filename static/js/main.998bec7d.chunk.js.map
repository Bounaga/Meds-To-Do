{"version":3,"sources":["components/todo.js","containers/form.js","containers/App.js","reportWebVitals.js","index.js"],"names":["todo","task","tasks","setTasks","name","className","completed","onClick","map","item","id","filter","oneTask","Form","props","useState","setName","handleSubmit","e","preventDefault","addTask","onSubmit","type","placeholder","value","onChange","target","href","setFilter","App","filteredTasks","setFilteredTasks","taskList","useEffect","filterHandeler","length","newTask","nanoid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSA+CeA,MA5Cf,YAAgD,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAAYC,EAAO,EAAPA,KA6BpC,OACI,sBAAKC,UAAU,OAAf,UACI,oBAAIA,UAAWJ,EAAKK,UAAY,OAAS,GAAzC,SACKF,IAGL,mBAAIC,UAAU,eACVE,QAzBW,WAEfJ,EAASD,EAAMM,KAAI,SAAAC,GAGf,OAAIA,EAAKC,KAAOT,EAAKS,GAEV,2BACAT,GADP,IAEIK,WAAYL,EAAKK,YAIlBG,SAcX,mBAAIJ,UAAU,eACVE,QArCS,WAKjBJ,EAASD,EAAMS,QAAO,SAAAC,GAAO,OAAIA,EAAQF,KAAOT,EAAKS,c,MCiC9CG,MAxCf,SAAcC,GAAQ,IAAD,EACOC,mBAAS,IADhB,mBACVX,EADU,KACJY,EADI,KAGXC,EAAgB,SAACC,GACnBA,EAAEC,iBACFL,EAAMM,QAAQhB,GACdY,EAAQ,KAUZ,OACI,gCACI,oBAAIX,UAAU,QAAd,gCACA,uBAAQgB,SAAUJ,EAAlB,UACI,uBAAQK,KAAK,OACLC,YAAY,WACZb,GAAG,iBACHN,KAAK,OACLoB,MAAOpB,EACPqB,SAjBC,SAACP,GAClBF,EAAQE,EAAEQ,OAAOF,UAkBT,wBAAQF,KAAK,SAASjB,UAAU,YAAhC,SACI,mBAAGsB,KAAMV,EAAT,SAAuB,2CAE3B,yBAAQQ,SAlBC,SAACP,GAClBJ,EAAMc,UAAUV,EAAEQ,OAAOF,QAiBenB,UAAU,SAA1C,UACI,wBAAQmB,MAAM,MAAd,kBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,8B,OCsCLK,MAnEf,SAAaf,GAAQ,IAAD,EACQC,mBAASD,EAAMZ,OADvB,mBACXA,EADW,KACJC,EADI,OAIwBY,mBAAS,IAJjC,mBAIXe,EAJW,KAIIC,EAJJ,KAiBZC,EAAWF,EAActB,KAAI,SAAAP,GAAI,OACrC,cAAC,EAAD,CACIS,GAAIT,EAAKS,GACTN,KAAMH,EAAKG,KACXE,UAAWL,EAAKK,UAIhBJ,MAASA,EACTC,SAAYA,EAEZF,KAAQA,GALHA,EAAKS,OAvBE,EAoCWK,mBAAS,OApCpB,mBAoCVJ,EApCU,KAoCFiB,EApCE,KAyDlB,OAlBCK,qBAAU,YACc,WACjB,OAAOtB,GAEH,IAAK,OACDoB,EAAiB7B,EAAMS,QAAO,SAAAV,GAAI,OAAuB,IAAnBA,EAAKK,cAC3C,MACJ,IAAK,SACDyB,EAAiB7B,EAAMS,QAAO,SAAAV,GAAI,OAAuB,IAAnBA,EAAKK,cAC3C,MACJ,QACIyB,EAAiB7B,IAI3BgC,KACH,CAAChC,EAAOS,IAGT,gCACE,cAAC,EAAD,CAAMS,QApDV,SAAiBhB,GACf,GAAIA,EAAK+B,OAAS,EAAG,CACnB,IAAMC,EAAU,CAAE1B,GAAI,QAAU2B,cAAUjC,KAAMA,EAAME,WAAU,GAChEH,EAAS,GAAD,mBAAKD,GAAL,CAAYkC,OAiDIR,UAAaA,IACrC,6BACKI,QCxDIM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK/C,MARI,OAUXgD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.998bec7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './todo.css';\r\n\r\nfunction todo({task, tasks, setTasks,   name}) {\r\n    //delete task logic\r\n    const handleDelete = () => {\r\n        //props.task is taking the cklicked one \r\n        // filter all of tasks and set it's new value to all tasks \r\n        //with out the clicked one => that is props.task \r\n        //here we use id to filter, you could use name\r\n        setTasks(tasks.filter(oneTask => oneTask.id !== task.id));\r\n    }\r\n    \r\n    //task done logic \r\n    const handleComplete = () => \r\n        {\r\n            setTasks(tasks.map(item => \r\n                {\r\n\r\n                if (item.id === task.id) \r\n                {\r\n                    return {\r\n                        ...task,\r\n                        completed: !task.completed,\r\n                    };\r\n                    \r\n                }\r\n                return item;\r\n\r\n                }\r\n                ));\r\n        };     \r\n    return(\r\n        <div className='task'>\r\n            <li className={task.completed ? 'done' : ''}>\r\n                {name}\r\n            </li>\r\n            {/* done Icon */}\r\n            <i  className='fas fa-check'\r\n                onClick={handleComplete}></i>\r\n            {/* delete icon */}\r\n            <i  className='fas fa-trash' \r\n                onClick={handleDelete}></i>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default todo;","import React, { useState  } from 'react';\r\nimport './form.css';\r\n\r\nfunction Form(props) {\r\n    const [name, setName] = useState('');\r\n\r\n    const handleSubmit  = (e)  =>  {\r\n        e.preventDefault();\r\n        props.addTask(name);\r\n        setName('');\r\n    }\r\n    const handleChange = (e) =>  {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleSelect = (e) => {\r\n        props.setFilter(e.target.value)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1 className='title'> Med's To Do list </h1>\r\n            <form   onSubmit={handleSubmit} >\r\n                <input  type='text'\r\n                        placeholder='New task'\r\n                        id='new-todo-input'\r\n                        name='text'\r\n                        value={name}\r\n                        onChange={handleChange}\r\n                />\r\n                <button type='submit' className='addButton'> \r\n                    <a href={handleSubmit}><span>Add</span></a>\r\n                </button>\r\n                <select onChange={handleSelect} className='filter'>\r\n                    <option value=\"all\"> All</option>\r\n                    <option value='done'>Done</option>\r\n                    <option value='undone'>Undone</option>\r\n                </select>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { useState,useEffect  } from 'react';\nimport './App.css';\nimport Todo from '../components/todo';\nimport Form from './form';\n// id generater library \nimport {nanoid } from 'nanoid';\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n  // filteredtasks = All , done , undone\n  const [filteredTasks, setFilteredTasks] = useState([]);\n\n  // this is a callback function\n  function addTask(name) {\n    if (name.length > 0) {\n      const newTask = { id: \"todo-\" + nanoid(), name: name, completed:false};\n      setTasks([...tasks, newTask]);\n    }\n  }\n\n \n\n  // task list is what gonna display on ui \n  const taskList = filteredTasks.map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        // this key is important for react smooth working ! lol\n        key={task.id}\n        //need these to delete \n        tasks = {tasks}\n        setTasks = {setTasks}\n        //single task\n        task = {task}\n        //need this for completed\n      />\n    )\n  );\n\n  \n  //all, done, undone logic\n   const [filter, setFilter] = useState('all');\n\n  //  run this every time value of tasks or filter changes\n   useEffect(() => {\n    const filterHandeler = () => {\n          switch(filter) \n            {\n              case 'done':\n                  setFilteredTasks(tasks.filter(task => task.completed === true));\n                  break;\n              case 'undone':\n                  setFilteredTasks(tasks.filter(task => task.completed === false));\n                  break;\n              default:\n                  setFilteredTasks(tasks);\n                  break;\n            }\n        };\n        filterHandeler();\n   },[tasks, filter]);\n   \n  return (\n    <div>\n      <Form addTask={addTask} setFilter = {setFilter}/>\n      <ul>\n          {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\n// here we stored tasks , as oblects insde list\nconst DATA = [\n  // {id:'todo-0', name:'Eat', completed:false},\n  // {id:'todo-1', name:'Sleep', completed:false},\n  // {id:'todo-2', name:'Repeat',  completed:false}\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks= {DATA}  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}